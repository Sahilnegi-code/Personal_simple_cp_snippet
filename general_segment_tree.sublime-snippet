<snippet>
	<content><![CDATA[
struct info
{
	int x;
	info () : x(INT_MAX) {};
};
 
struct SegTree
{
	int N;
	vector<info> st;
 
	SegTree(int n)
	{
		N = n;
		st.resize(4 * N + 5);
	}
 
	void merge(info &cur, info &l, info &r)
	{
		cur.x = min(l.x, r.x);
	}
 
	void Build(int node, vi &arr, int L, int R)
	{
		if (L == R)
		{
			st[node].x = arr[L];
			return;
		}
		int M = (L + R) / 2;
		Build(node * 2, arr,  L, M);
		Build(node * 2 + 1, arr, M + 1, R);
		merge(st[node], st[node * 2], st[node * 2 + 1]);
	}
 
	info Query(int node, int L, int R, int i, int j)
	{
		if (j < L || i > R)
			return info();
		if (i <= L && R <= j)
			return st[node];
		int M = (L + R) / 2;
		info left = Query(node * 2, L, M, i, j);
		info right = Query(node * 2 + 1, M + 1, R, i, j);
		info cur;
		merge(cur, left, right);
		return cur;
	}
 
	void Update(int node, int L, int R, int pos, int val)
	{
		if (L == R)
		{
			st[node].x += val;
			return;
		}
		int M = (L + R) / 2;
		if (pos <= M)
			Update(node * 2, L, M, pos, val);
		else
			Update(node * 2 + 1, M + 1, R, pos, val);
 
		merge(st[node], st[node * 2], st[node * 2 + 1]);
	}
 
	info query(int l, int r) { return Query(1, 0, N - 1, l, r); }
 
	void update(int pos, int val) { Update(1, 1, N, pos, val); }
 
	void build(vi &arr) { Build(1, arr, 0, N - 1); }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>generalseg</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
